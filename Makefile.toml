[tasks.fmt]
description = "Format source code"
workspace = false
install_script = ['''
#!/usr/bin/env bash
rustup which rustfmt --toolchain nightly
if [ $? -ne 0 ]; then
  rustup install nightly
fi
''']
script = '''
#!/usr/bin/env bash
cargo +nightly fmt
'''

[tasks.sort-dependencies]
workspace = false
command = "rust-script"
args = ["scripts/sort_dependencies.rs"]


[tasks.check-source-policy]
description = "Enforce source policy: ban mod.rs and one top-level type/trait per file (workspace-aware, ignores tests.rs/lib.rs/main.rs)"
workspace = false
command = "rust-script"
args = ["scripts/check_source_policy.rs"]


[tasks.check-impl-co-location]
description = "Ensure struct definitions and inherent impl blocks live in the same file"
workspace = false
command = "rust-script"
args = ["scripts/check_impl_co_location.rs"]


[tasks.check-package-exposure]
description = "Enforce Java-style package re-exports (no deep crate:: paths or wildcard exports)"
workspace = false
command = "rust-script"
args = ["scripts/check_package_exposure.rs"]


[tasks.check-reexport-hierarchy]
description = "Verify that modules only re-export their descendants"
workspace = false
command = "rust-script"
args = ["scripts/check_reexport_hierarchy.rs"]

[tasks.check-module-wiring]
description = "Verify parent modules re-export leaf types without leaking pub mod"
workspace = false
command = "rust-script"
args = ["scripts/check_module_wiring.rs"]

[tasks.coverage-grcov]
description = "Generate code coverage report using grcov"
workspace = false
category = "Test"
script = '''
#!/usr/bin/env bash
./coverage.sh
'''

[tasks.coverage]
description = "Generate code coverage report"
workspace = false
category = "Test"
run_task = { name = "coverage-grcov" }

[tasks.lifetime-regression]
description = "Run lifetime regression suite (tests + coverage)"
workspace = false
category = "Test"
dependencies = ["coverage"]

[tasks.cyclomatic]
description = "Report heuristic cyclomatic complexity for key crates"
workspace = false
category = "Lint"
command = "rust-script"
args = ["scripts/cyclomatic.rs"]

[tasks.ci-check]
description = "Run full CI validation pipeline"
workspace = false
script = '''
#!/usr/bin/env bash
set -euo pipefail
ARGS=("$@")
if [ ${#ARGS[@]} -gt 0 ] && [ "${ARGS[0]}" = "--" ]; then
  ARGS=("${ARGS[@]:1}")
fi
if [ ${#ARGS[@]} -eq 0 ]; then
  ARGS=("all")
fi
./scripts/ci-check.sh "${ARGS[@]}"
'''

[tasks.ci-dylint]
description = "Run custom dylints (optionally specify lint names)"
workspace = false
script = '''
#!/usr/bin/env bash
set -euo pipefail
ARGS=("$@")
if [ ${#ARGS[@]} -gt 0 ] && [ "${ARGS[0]}" = "--" ]; then
  ARGS=("${ARGS[@]:1}")
fi
./scripts/ci-check.sh dylint "${ARGS[@]}"
'''
